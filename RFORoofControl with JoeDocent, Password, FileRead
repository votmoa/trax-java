-----------LoginPasswordAuthenticate.java-----------

package twoWaySerialComm;

import twoWaySerialComm.ReadAFile;

public class LoginPasswordAuthenticate {
	 
    public static boolean authenticate(String password) {
        // hardcoded username and password
        if (password.equals(ReadAFile.passwordSet)) {
            return true;
        }
        return false;
    }
}


-----------PasswordWindow.java-----------

package twoWaySerialComm;


import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import twoWaySerialComm.LoginPasswordAuthenticate;

import javax.swing.JPasswordField;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Font;
import javax.swing.JButton;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class PasswordWindow extends JFrame {

	public JPanel contentPane;
	public JPasswordField passwordField;

	//Launch the application.
	 
	
	//public static void main(String[] args) {
	public static void startRFOControlPassword() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					PasswordWindow frame = new PasswordWindow();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public PasswordWindow() {
		setTitle("RFO Roof Control Admin Panel");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 400, 130);
		contentPane = new JPanel();
		contentPane.setBackground(Color.MAGENTA);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		passwordField = new JPasswordField();
		passwordField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
					if (LoginPasswordAuthenticate.authenticate(getPassword())) {
	                    // CODE to proceed to Admin Roof Control Panel
	        			TwoWaySerialComm.RoofControlPanelJoeDocent.startAdminPanelFromJoeDocentPanel();
	        			dispose();
	            }
					else {
						dispose();
					}
			}
		});
		passwordField.setBounds(178, 11, 182, 25);
		contentPane.add(passwordField);
		
		JLabel lblNewLabel = new JLabel("ENTER PASSWORD");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblNewLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		lblNewLabel.setBounds(22, 11, 134, 25);
		contentPane.add(lblNewLabel);
		
		JButton btnNewButton = new JButton("ENTER");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (LoginPasswordAuthenticate.authenticate(getPassword())) {
                    // CODE to proceed to Admin Roof Control Panel
        			TwoWaySerialComm.RoofControlPanelJoeDocent.startAdminPanelFromJoeDocentPanel();
        			dispose();
            }
				else {
					dispose();
				}
			}
		});
		btnNewButton.setFont(new Font("Tahoma", Font.BOLD, 14));
		btnNewButton.setBounds(67, 47, 100, 40);
		contentPane.add(btnNewButton);
		
		JButton btnCancel = new JButton("CANCEL");
		btnCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				dispose();
			}
		});
		btnCancel.setFont(new Font("Tahoma", Font.BOLD, 14));
		btnCancel.setBounds(215, 47, 100, 40);
		contentPane.add(btnCancel);
	}
	
    public String getPassword() {
        return new String(passwordField.getPassword());
    }

}


-----------ReadAFile.java-----------

package twoWaySerialComm;

import java.io.*;

public class ReadAFile {
	
	//these Strings are the product of this class and populate the appropriate classes in the rest of the program
	static String comPort;
	static String passwordSet;
	static String logDirectory;
	
	static String parseLabel;

	public static void startReadAFile() {

		try {
			
			//note location of reference file for configuration
			File myFile = new File ("C:/Users/James Finn/Desktop/TRaxJava.txt");
			
			FileReader fileReader = new FileReader (myFile);
			BufferedReader bufferedReader = new BufferedReader (fileReader);
			
			String readFileLine = null;
					
			while ((readFileLine = bufferedReader.readLine()) != null) {
				//System.out.println(readFileLine);
				parseCategorize(readFileLine);

			}
			bufferedReader.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}
	
	public static void parseCategorize (String stringToParse) {
		
		//**this trim may present problems in Log file names with spaces**
		stringToParse = stringToParse.trim();	
		
		String[] parseResults = stringToParse.split("=");
		parseLabel = parseResults[0];
		if (parseLabel.equals("PORT")) {
			comPort = parseResults[1];	
			//System.out.println(comPort);
		}
		if (parseLabel.equals("PASSWORD")) {
			passwordSet = parseResults[1];
			//System.out.println(passwordSet);
		}
		if (parseLabel.equals("LOGDIR")) {
			logDirectory = parseResults[1];
			//System.out.println(logDirectory);
		}
	}	
}


-----------TwoWaySerialComm.java-----------

package twoWaySerialComm;

//RFO Roof Control 24 Aug 2016 v1.0  jcf

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;

import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

//import static twoWaySerialComm.PasswordWindow.startRFOControlPassword;

import java.awt.Color;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.text.DefaultCaret;
import javax.swing.JTextArea;

import java.text.SimpleDateFormat;
import java.util.Date;

import twoWaySerialComm.WriteAFileInRoofControlStringFromArduino;
//import twoWaySerialCommJoeDocent.RoofControlPanelJoeDocent;
import twoWaySerialComm.WriteAFileInRoofControlCommandToArduino;
//import twoWaySerialComm.PasswordWindow;
import twoWaySerialComm.ReadAFile;


   //This version of the TwoWaySerialComm makes use of the 
   //SerialPortEventListener to avoid polling.


public class TwoWaySerialComm
{		
		
	static String userInput = null;
	static RoofControlPanel roofControlPanel = new RoofControlPanel ();	
	static RoofControlPanelJoeDocent roofControlPanelJoeDocent = new RoofControlPanelJoeDocent ();
	static JTextField textSecurityStatus;
	static JTextField textWeatherStatus;
	static JTextField textRoofOpenStatus;
	static JTextField textRoofClosedStatus;
	static JTextField textMountParkedStatus;
	static JTextField textBldgPowerInStatus;
	static JTextField textRoofPowerInStatus;
	static JTextField textMountPowerInStatus;
	static JTextField textRoofPositionJoeDocent;
	static JTextField textMountParkedJoeDocent;
	static JTextField textBldgPowerJoeDocent;
	static JTextField textRoofPowerJoeDocent;
	static JTextField textMountPowerJoeDocent;
	static JTextArea textAreaStatus;
	static JTextArea textAreaStatusJoeDocent;
	static JScrollPane textAreaStatusScroller;
	static DefaultCaret caret;
	static JTextArea textAreaTimeStamp;
	static String line;
	static String oldLine = null;
	static RoofControlPanel window;							//allows window object visibility to be manipulated
	static RoofControlPanelJoeDocent windowJoeDocent;
	//static Boolean frmRfoRoofControlSetVisible = true;    //testing control of frame visibility
	//static int analogInputReadingA0;
	//static int roofPositionStatus;
	//static int conditionIndicators;
	//static String conditionOne;
	//static String conditionTwo;
	//static String conditionThree;
	//static JProgressBar progressBar;
	//static Canvas canvasSecurityStatus;

	static int a = 0;		//counter for a new session log file
	static File dir;
	static File log;
		
    public TwoWaySerialComm()  //constructor of class TwoWaySerialComm, with instantiation of class and invocation of superclass methods
    {
        super();
    }  
    
    //RxTx Serial Connection Protocol    
    
    void connect ( String portName ) throws Exception
    {
        CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(portName);
        if ( portIdentifier.isCurrentlyOwned() )
        {
            System.out.println("Error: Port is currently in use");
        }
        else
        {
            CommPort commPort = portIdentifier.open(this.getClass().getName(),2000);
            
            if ( commPort instanceof SerialPort )
            {
                SerialPort serialPort = (SerialPort) commPort;
                serialPort.setSerialPortParams(57600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
                
                OutputStream out = serialPort.getOutputStream();
                InputStream in = serialPort.getInputStream();
                
                               
                (new Thread(new SerialWriter(out))).start();
                
                serialPort.addEventListener(new SerialReader(in));
                serialPort.notifyOnDataAvailable(true);              
                                
            }
            else
            {
                System.out.println("Error: Only serial ports are handled by this example.");
            }
        }     
    }
    
    //Serial Input Reader
    
    public static class SerialReader implements SerialPortEventListener 
    {  	        	              	 
        InputStream in;        
        
        public SerialReader ( InputStream in )  //constructor for class SerialReader, with instantiation of the class, 
        {										//and definition of instance variable "in", set equal to arugument "in"
            this.in = in;			
        }
        
        //Serial Read Input String on event Data Available
        
        @Override
    	public void serialEvent(SerialPortEvent e) {
    		try {
    		   	
    			InputStreamReader stream = new InputStreamReader(in);   //get string from input byte stream
    	        BufferedReader reader = new BufferedReader(stream);		//character stream to buffer
    			line = reader.readLine(); 
    			
    			line = line.trim();									    //gets rid of any whitespace
    			
    			WriteAFileInRoofControlStringFromArduino.writeAFileString();	//calls log writer
    			
    			System.out.println(line);
    			System.out.println("String length = " + line.length());
    			
    			SimpleDateFormat sdfMessageTime = new SimpleDateFormat("HH:mm:ss");
    	/*
    			try {													//delay to allow reading of current message 
    				Thread.sleep(1000);									//without getting stepped on by new message
    			} catch (InterruptedException ex) {						//1000 millisec is too long - occasional message lost
    				ex.printStackTrace();
    			}
    	*/
    				if(line.length() > 2) {								//put in for additional "null" event being transmitted by Arduino
    		    				  										//? reading null character at end of string - happens less at higher baud
    				//textAreaStatus.setText(line);
    				textAreaStatus.append(sdfMessageTime.format(new Date()) + " " + line + "\n \n");
    				textAreaTimeStamp.setText(sdfMessageTime.format(new Date()));
    				
    				}
    				    				
    				if(line.startsWith("INFO: securityOK")) {			//sends String to be split only if returning Status
    																	//only the Status String starts with "INFO: securityOK"
    					visualization(line);							//there are other possible strings for "INFO:"
    				
    				}    
    				
    				if(line.startsWith("ERROR: ")) {
    					textAreaStatusJoeDocent.append(line + "\n \n");
    				}
    			
    		}  catch (IOException ex) {
    			ex.printStackTrace();
    		}   				
    		    
     	}
    	
    	public void visualization(String line){
    		
    		//Split the Input Status String
    		
    		String[] values = line.split(" ");    		
    		
    		String security = values[1];
    		String weather = values[2];
    		String roofOpen = values[3];
    		String roofClosed = values[4];
    		String mountParked = values[5];
    		String bldgPowerIn = values[6];
    		String roofPowerIn = values[7];
    		String mountPowerIn = values[8];
    	/*			
    		System.out.println("Security = " + security);
    		System.out.println("Weather = " + weather);
    		System.out.println("RoofOpen = " + roofOpen);
    		System.out.println("RoofClosed = " + roofClosed);
    		System.out.println("Mount Parked = " + mountParked);
    		System.out.println("Building Power = " + bldgPowerIn);
    		System.out.println("Roof Power = " + roofPowerIn);
    		System.out.println("Mount Power = " + mountPowerIn);
    	*/	
    		//Status Indicator Logic
    		
    		if (security.endsWith("1")) {
        		textSecurityStatus.setText("GOOD");
        		textSecurityStatus.setBackground(Color.GREEN);
    		} else {
        		textSecurityStatus.setText("BAD");
        		textSecurityStatus.setBackground(Color.RED);
    		}
    		
    		if (weather.endsWith("1")) {
        		textWeatherStatus.setText("GOOD");
        		textWeatherStatus.setBackground(Color.GREEN);
    		} else {
        		textWeatherStatus.setText("BAD");
        		textWeatherStatus.setBackground(Color.RED);
    		}
    		
    		if (roofOpen.endsWith("1")) {
    			textRoofOpenStatus.setText("YES");
    			textRoofOpenStatus.setBackground(Color.GREEN);
    			textRoofPositionJoeDocent.setText("OPEN");
    			textRoofPositionJoeDocent.setForeground(Color.BLACK);
    			textRoofPositionJoeDocent.setBackground(Color.GREEN);
    		} else {
    			textRoofOpenStatus.setText("NO");
    			textRoofOpenStatus.setBackground(Color.RED);
    		}
    		
    		if (roofOpen.endsWith("0") && roofClosed.endsWith("0")) {
    			textRoofPositionJoeDocent.setText("MIDWAY");
    			textRoofPositionJoeDocent.setForeground(Color.BLACK);
    			textRoofPositionJoeDocent.setBackground(Color.YELLOW);
    		}
    		
    		if (roofClosed.endsWith("1")) {
    			textRoofClosedStatus.setText("YES");
    			textRoofClosedStatus.setBackground(Color.GREEN);
    			textRoofPositionJoeDocent.setText("CLOSED");
    			textRoofPositionJoeDocent.setForeground(Color.WHITE);
    			textRoofPositionJoeDocent.setBackground(Color.RED);
    		} else {
    			textRoofClosedStatus.setText("NO");
    			textRoofClosedStatus.setBackground(Color.RED);
    		}
    		
    		if (mountParked.endsWith("1")) {
    			textMountParkedStatus.setText("PARKED");
    			textMountParkedStatus.setBackground(Color.GREEN);
    			textMountParkedJoeDocent.setText("PARKED");
    			textMountParkedJoeDocent.setForeground(Color.BLACK);
    			textMountParkedJoeDocent.setBackground(Color.GREEN);
    		} else {
    			textMountParkedStatus.setText("UNPARKED");
    			textMountParkedStatus.setBackground(Color.RED);
    			textMountParkedJoeDocent.setForeground(Color.WHITE);
    			textMountParkedJoeDocent.setText("UNPARKED");
    			textMountParkedJoeDocent.setBackground(Color.RED);
    		}
    		
    		if (bldgPowerIn.endsWith("1")) {
    			textBldgPowerInStatus.setText("ON");
    			textBldgPowerInStatus.setBackground(Color.GREEN);
    			textBldgPowerJoeDocent.setText("ON");
    			textBldgPowerJoeDocent.setForeground(Color.BLACK);
    			textBldgPowerJoeDocent.setBackground(Color.GREEN);
    		} else {
    			textBldgPowerInStatus.setText("OFF");
    			textBldgPowerInStatus.setBackground(Color.RED);
    			textBldgPowerJoeDocent.setForeground(Color.WHITE);
    			textBldgPowerJoeDocent.setText("OFF");
    			textBldgPowerJoeDocent.setBackground(Color.RED);
    		}
    		
    		if (roofPowerIn.endsWith("1")) {
    			textRoofPowerInStatus.setText("ON");
    			textRoofPowerInStatus.setBackground(Color.GREEN);
    			textRoofPowerJoeDocent.setText("ON");
    			textRoofPowerJoeDocent.setForeground(Color.BLACK);
    			textRoofPowerJoeDocent.setBackground(Color.GREEN);
    		} else {
    			textRoofPowerInStatus.setText("OFF");
    			textRoofPowerInStatus.setBackground(Color.RED);
    			textRoofPowerJoeDocent.setForeground(Color.WHITE);
    			textRoofPowerJoeDocent.setText("OFF");
    			textRoofPowerJoeDocent.setBackground(Color.RED);
    		}
    		
    		if (mountPowerIn.endsWith("1")) {
    			textMountPowerInStatus.setText("ON");
    			textMountPowerInStatus.setBackground(Color.GREEN);
    			textMountPowerJoeDocent.setText("ON");
    			textMountPowerJoeDocent.setForeground(Color.BLACK);
    			textMountPowerJoeDocent.setBackground(Color.GREEN);
    		} else {
    			textMountPowerInStatus.setText("OFF");
    			textMountPowerInStatus.setBackground(Color.RED);
    			textMountPowerJoeDocent.setForeground(Color.WHITE);
    			textMountPowerJoeDocent.setText("OFF");
    			textMountPowerJoeDocent.setBackground(Color.RED);
    		}
    		
    	}

    }  //close class SerialReader
    
    //Serial Writer    
     
    public static class SerialWriter implements Runnable 
    {
        static OutputStream out;
        
        public SerialWriter ( OutputStream out )
        {
            this.out = out;
        }
        
        public void run ()
        {
        		
        	    while (userInput != null) {                 	
            	             
                try {
                	
        			out.write(userInput.getBytes());
        			
        		} catch (IOException e1) {
        			e1.printStackTrace();
        			System.exit(-1);
            }
               
        	}                                 
                      
        }       
                
    }  //close class SerialWriter (serial writer thread)
    
    public static class RoofControlPanel {

    	public JFrame frmRfoRoofControl;    	
    	
    	//The GUI is built in class RoofControlPanel, then copied here.  RoofControlPanel is otherwise inactive.
    	 
    	public void roofControlPanel () {
    		
    		window = new RoofControlPanel();
    		//window.frmRfoRoofControl.setVisible(true);	//commenting out causes Joe Docent Panel to be first displayed
    				
    	}
    	
    	 //Create the application (construtor for RoofControlPanel)
    	
    	public RoofControlPanel() {
    		initialize();
    	}
    	
    	 //Initialize the contents of the frame.
    	 
    	private void initialize() {
    		frmRfoRoofControl = new JFrame();
    		frmRfoRoofControl.getContentPane().setBackground(new Color(50, 180, 190));
    		frmRfoRoofControl.setResizable(false);
    		frmRfoRoofControl.setTitle("RFO EAST WING ROOF CONTROL ADMIN PANEL");
    		frmRfoRoofControl.setBounds(100, 100, 450, 450);
    		frmRfoRoofControl.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    		frmRfoRoofControl.getContentPane().setLayout(null);
    		
    		//Command Buttons & Action Event Serial Command Writing-------------
    		//all commands must start with :: and end with newline \n
    		
    		JButton btnJoeDocent = new JButton("Return to Joe Docent Panel");
    		btnJoeDocent.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.window.frmRfoRoofControl.setVisible(false);
    				TwoWaySerialComm.windowJoeDocent.frmRfoJoeDocent.setVisible(true);
    			}
    		});
    		btnJoeDocent.setBounds(173, 153, 240, 23);
    		frmRfoRoofControl.getContentPane().add(btnJoeDocent);
    		
    		JButton btnToggleFob = new JButton("Toggle FOB");
    		btnToggleFob.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::ToggleFob\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer								//calls log writer
    				
    				}  catch (IOException ex) {}
    				    				
    				System.out.println("\n" + "I clicked Toggle FOB " + userInput); 
    			}
    		});
    		btnToggleFob.setBounds(173, 187, 240, 23);
    		frmRfoRoofControl.getContentPane().add(btnToggleFob);
    		
    		//code for old Roof Open and Roof Close command buttons - replaced by Toggle Fob above
    		
/*    		JButton btnRoofOpen = new JButton("Roof OPEN");
    		btnRoofOpen.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::Open\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer								//calls log writer
    				
    				}  catch (IOException ex) {}
    				    				
    				System.out.println("\n" + "I clicked Roof OPEN " + userInput);    				
    			}
    		});
    		btnRoofOpen.setBounds(173, 187, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnRoofOpen);
    		
    		JButton btnRoofClose = new JButton("Roof CLOSE");
    		btnRoofClose.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::Close\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Roof CLOSE " + userInput);
    			}
    		});
    		btnRoofClose.setBounds(303, 187, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnRoofClose);
*/    		
    		JButton btnEmergSTOP = new JButton("Emerg STOP");
    		btnEmergSTOP.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::Stop\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Emerg STOP " + userInput);
    			}
    		});
    		btnEmergSTOP.setBounds(173, 221, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnEmergSTOP);   		
    		
    		JButton btnStatus = new JButton("STATUS");
    		btnStatus.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::Status\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Status " + userInput);
    			}
    		});
    		btnStatus.setBounds(303, 221, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnStatus);
    		
    		JButton btnRoofPwrOn = new JButton("Roof Pwr ON");
    		btnRoofPwrOn.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::RPon\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Roof Pwr ON " + userInput);
    			}
    		});
    		btnRoofPwrOn.setBounds(173, 255, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnRoofPwrOn);
    		
    		JButton btnRoofPwrOff = new JButton("Roof Pwr OFF");
    		btnRoofPwrOff.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::RPoff\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Roof Pwr OFF " + userInput);
    			}
    		});
    		btnRoofPwrOff.setBounds(303, 255, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnRoofPwrOff);
    		
    		JButton btnMountPwrON = new JButton("Mount Pwr ON");
    		btnMountPwrON.setFont(new Font("Tahoma", Font.PLAIN, 10));
    		btnMountPwrON.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::MPon\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Mount Pwr ON " + userInput);
    			}
    		});
    		btnMountPwrON.setBounds(173, 289, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnMountPwrON);
    		
    		JButton btnMountPwrOff = new JButton("Mount Pwr OFF");
    		btnMountPwrOff.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::MPoff\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Mount Pwr OFF " + userInput);
    			}
    		});
    		btnMountPwrOff.setFont(new Font("Tahoma", Font.PLAIN, 10));
    		btnMountPwrOff.setBounds(303, 289, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnMountPwrOff);
    		
    		JButton btnOverrideOn = new JButton("Override ON");
    		btnOverrideOn.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::OverrideOn\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Override ON " + userInput);
    			}
    		});
    		btnOverrideOn.setBounds(173, 323, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnOverrideOn);
    		
    		JButton btnOverrideOff = new JButton("Override OFF");
    		btnOverrideOff.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::OverrideOff\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Override OFF " + userInput);
    			}
    		});
    		btnOverrideOff.setBounds(303, 323, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnOverrideOff);
    		
    		JButton btnDebugOn = new JButton("Debug ON");
    		btnDebugOn.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::DebugOn\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Debug ON " + userInput);
    			}
    		});
    		btnDebugOn.setBounds(173, 357, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnDebugOn);
    		
    		JButton btnDebugOff = new JButton("Debug OFF");
    		btnDebugOff.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				TwoWaySerialComm.userInput = "::DebugOff\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Debug OFF " + userInput);
    			}
    		});
    		btnDebugOff.setBounds(303, 357, 110, 23);
    		frmRfoRoofControl.getContentPane().add(btnDebugOff);
    		
    		//CCD System Status/Message JTextArea------------------------------
    		
    		JLabel lblStatusMessage = new JLabel("CCD System Status / Message");
    		lblStatusMessage.setFont(new Font("Tahoma", Font.BOLD, 12));
    		lblStatusMessage.setForeground(Color.WHITE);
    		lblStatusMessage.setBounds(69, 35, 187, 14);
    		frmRfoRoofControl.getContentPane().add(lblStatusMessage); 
    	   		    		
    		textAreaStatus = new JTextArea();
    		textAreaStatus.setLineWrap(true);
    		textAreaStatus.setWrapStyleWord(true);
    		textAreaStatus.setEditable(false);
    		textAreaStatus.setFont(new Font("Arial", Font.BOLD, 11));
    		textAreaStatus.setBackground(Color.YELLOW);
    		//textAreaStatus.setBounds(69, 60, 309, 80);
    		
    		//adds Scroll Pane to textAreaStatus
    		
    		textAreaStatusScroller = new JScrollPane(textAreaStatus);
    		textAreaStatusScroller.setBounds(69, 60, 309, 80);	//the ScrollPane, not textArea now sets bounds
    		textAreaStatusScroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    		textAreaStatusScroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    		caret = (DefaultCaret)textAreaStatus.getCaret();	//this an next line force scroll to lowest position down
    		caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    		frmRfoRoofControl.getContentPane().add(textAreaStatusScroller);
    		
    		//frmRfoRoofControl.getContentPane().add(textAreaStatus);  //this adds textAreaStatus, now supplanted by textAreaStatusScroller
    		
    		textAreaTimeStamp = new JTextArea();
    		textAreaTimeStamp.setLineWrap(false);
    		textAreaTimeStamp.setEditable(false);
    		textAreaTimeStamp.setFont(new Font("Arial", Font.BOLD, 12));
    		textAreaTimeStamp.setBackground(Color.YELLOW);
    		textAreaTimeStamp.setBounds(273, 35, 105, 14);
    		frmRfoRoofControl.getContentPane().add(textAreaTimeStamp);
  		
    		//Status Indicators -----------------------------------------------
    		
    		JLabel lblSecurityStatus = new JLabel("Security");
    		lblSecurityStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblSecurityStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblSecurityStatus.setBounds(8, 164, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblSecurityStatus);
    		
    		textSecurityStatus = new JTextField();
    		textSecurityStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textSecurityStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textSecurityStatus.setColumns(4);    		
    		textSecurityStatus.setBounds(85, 160, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textSecurityStatus);
    		
    		
    		JLabel lblWeatherStatus = new JLabel("Weather");
    		lblWeatherStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblWeatherStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblWeatherStatus.setBounds(8, 195, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblWeatherStatus);
    		
    		textWeatherStatus = new JTextField();
    		textWeatherStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textWeatherStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textWeatherStatus.setColumns(4);
    		textWeatherStatus.setBounds(85, 191, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textWeatherStatus);
    		    		
    		JLabel lblRoofOpenStatus = new JLabel("Roof Open");
    		lblRoofOpenStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblRoofOpenStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblRoofOpenStatus.setBounds(8, 226, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblRoofOpenStatus);
    		
    		textRoofOpenStatus = new JTextField();
    		textRoofOpenStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textRoofOpenStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textRoofOpenStatus.setColumns(4);    		
    		textRoofOpenStatus.setBounds(85, 222, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textRoofOpenStatus);
    		
    		JLabel lblRoofClosedStatus = new JLabel("Roof Closed");
    		lblRoofClosedStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblRoofClosedStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblRoofClosedStatus.setBounds(8, 255, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblRoofClosedStatus);
    		
    		textRoofClosedStatus = new JTextField();
    		textRoofClosedStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textRoofClosedStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textRoofClosedStatus.setColumns(4);
    		textRoofClosedStatus.setBounds(85, 251, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textRoofClosedStatus);
    		
    		JLabel lblMountParkedStatus = new JLabel("Mount Park");
    		lblMountParkedStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblMountParkedStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblMountParkedStatus.setBounds(8, 284, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblMountParkedStatus);
    		
    		textMountParkedStatus = new JTextField();
    		textMountParkedStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textMountParkedStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textMountParkedStatus.setColumns(4);
    		textMountParkedStatus.setBounds(85, 280, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textMountParkedStatus);
    		
    		JLabel lblBldgPowerInStatus = new JLabel("Bldg Pwr");
    		lblBldgPowerInStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblBldgPowerInStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblBldgPowerInStatus.setBounds(8, 313, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblBldgPowerInStatus);
    		
    		textBldgPowerInStatus = new JTextField();
    		textBldgPowerInStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textBldgPowerInStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textBldgPowerInStatus.setColumns(4);
    		textBldgPowerInStatus.setBounds(85, 309, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textBldgPowerInStatus);
    		
    		JLabel lblRoofPowerInStatus = new JLabel("Roof Pwr");
    		lblRoofPowerInStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblRoofPowerInStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblRoofPowerInStatus.setBounds(8, 342, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblRoofPowerInStatus);
    		
    		textRoofPowerInStatus = new JTextField();
    		textRoofPowerInStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textRoofPowerInStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textRoofPowerInStatus.setColumns(4);
    		textRoofPowerInStatus.setBounds(85, 338, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textRoofPowerInStatus);
    		
    		JLabel lblMountPowerInStatus = new JLabel("Mount Pwr");
    		lblMountPowerInStatus.setHorizontalTextPosition(SwingConstants.RIGHT);
    		lblMountPowerInStatus.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblMountPowerInStatus.setBounds(8, 371, 70, 14);
    		frmRfoRoofControl.getContentPane().add(lblMountPowerInStatus);
    		
    		textMountPowerInStatus = new JTextField();
    		textMountPowerInStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		textMountPowerInStatus.setFont(new Font("Tahoma", Font.BOLD, 11));
    		textMountPowerInStatus.setColumns(4);
    		textMountPowerInStatus.setBounds(85, 367, 70, 20);
    		frmRfoRoofControl.getContentPane().add(textMountPowerInStatus);    		
    		    		
    	}
    }  // close class RoofControlPanel (GUI Builder)---------------------------------------------
    
    
    public static class RoofControlPanelJoeDocent {
    	
    	//used by RFORoofControlPassword in package password to change JoeDocent Panel to Admin after correct password
    	public static void startAdminPanelFromJoeDocentPanel () {
			TwoWaySerialComm.window.frmRfoRoofControl.setVisible(true);
			TwoWaySerialComm.windowJoeDocent.frmRfoJoeDocent.setVisible(false);
    	}

    	public JFrame frmRfoJoeDocent;
    	//private JTextField textRoofPositionJoeDocent;
    	//private JTextField textMountParkedJoeDocent;
    	//private JTextField textBldgPowerJoeDocent;
    	//private JTextField textRoofPowerJoeDocent;
    	//private JTextField textMountPowerJoeDocent;

    	//Launch the application.
    	 
    	public void RoofControlPanelJoeDocent () {
    		
    					windowJoeDocent = new RoofControlPanelJoeDocent();
    					windowJoeDocent.frmRfoJoeDocent.setVisible(true);	//causes Joe Docent Panel to be first displayed
    	}
    	

    	// constructor for RoofControlPanelJoeDocent
    	
    	public RoofControlPanelJoeDocent() {
    		initialize();
    	}

    	//Initialize the contents of the frame.
    	 
    	private void initialize() {
    		frmRfoJoeDocent = new JFrame();
    		frmRfoJoeDocent.getContentPane().setBackground(new Color(50, 180, 190));
    		frmRfoJoeDocent.setFont(new Font("Arial", Font.BOLD, 12));
    		frmRfoJoeDocent.setResizable(false);
    		frmRfoJoeDocent.setTitle("RFO EAST WING ROOF CONTROL");
    		frmRfoJoeDocent.setBounds(100, 100, 450, 381);
    		frmRfoJoeDocent.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    		frmRfoJoeDocent.getContentPane().setLayout(null);
    		
    		//---------------------------------Joe Docent Buttons
    		
    		JButton btnStartStop = new JButton("<html>START<br>&nbsp;STOP</html>");
    		btnStartStop.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnStartStop.setForeground(Color.BLUE);
    		btnStartStop.setBackground(Color.GREEN);
    		btnStartStop.setFont(new Font("Tahoma", Font.BOLD, 24));
    		btnStartStop.setBounds(248, 132, 127, 80);
    		frmRfoJoeDocent.getContentPane().add(btnStartStop);
    		btnStartStop.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				textAreaStatusJoeDocent.setText("");
    				TwoWaySerialComm.userInput = "::ToggleFob\n";	//note that fob actuated with either ::Open or ::Close command
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer								//calls log writer
    				
    				}  catch (IOException ex) {}
    				    				
    				System.out.println("\n" + "I clicked Roof START/STOP (ToggleFob) " + userInput);    				
    			}
    		});
    		
    		String label = "<html>" + "EMERGENCY" + "<br>" + "STOP" + "</html>";
    		JButton btnEmergencyStop = new JButton("<html>EMERGENCY<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STOP</html>");
    		btnEmergencyStop.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnEmergencyStop.setBackground(Color.RED);
    		btnEmergencyStop.setForeground(Color.WHITE);
    		btnEmergencyStop.setFont(new Font("Tahoma", Font.BOLD, 15));
    		btnEmergencyStop.setBounds(248, 223, 127, 49);
    		frmRfoJoeDocent.getContentPane().add(btnEmergencyStop);
    		btnEmergencyStop.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				textAreaStatusJoeDocent.setText("");
    				TwoWaySerialComm.userInput = "::Stop\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked EMERGENCY STOP " + userInput);
    			}
    		});
    		
    		JButton btnAdmin = new JButton("ADMIN");
    		btnAdmin.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent arg0) {
    				textAreaStatusJoeDocent.setText("");
    				
    				
    				PasswordWindow.startRFOControlPassword();
    			}
    		});
    		btnAdmin.setFont(new Font("Tahoma", Font.BOLD, 12));
    		btnAdmin.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnAdmin.setForeground(Color.WHITE);
    		btnAdmin.setBackground(Color.GRAY);
    		btnAdmin.setBounds(267, 283, 89, 41);
    		frmRfoJoeDocent.getContentPane().add(btnAdmin);
    		
    		JButton btnRoofPwrOnJoeDocent = new JButton("ON");
    		btnRoofPwrOnJoeDocent.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnRoofPwrOnJoeDocent.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				textAreaStatusJoeDocent.setText("");
    				TwoWaySerialComm.userInput = "::RPon\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Roof Power On " + userInput);
    			}
    		});
    		btnRoofPwrOnJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		btnRoofPwrOnJoeDocent.setBackground(Color.GREEN);
    		btnRoofPwrOnJoeDocent.setBounds(320, 64, 35, 24);
    		frmRfoJoeDocent.getContentPane().add(btnRoofPwrOnJoeDocent);
    		
    		JButton btnRoofPwrOffJoeDocent = new JButton("OFF");
    		btnRoofPwrOffJoeDocent.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnRoofPwrOffJoeDocent.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				textAreaStatusJoeDocent.setText("");
    				TwoWaySerialComm.userInput = "::RPoff\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Roof Power Off " + userInput);
    			}
    		});
    		btnRoofPwrOffJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		btnRoofPwrOffJoeDocent.setForeground(Color.WHITE);
    		btnRoofPwrOffJoeDocent.setBackground(Color.RED);
    		btnRoofPwrOffJoeDocent.setBounds(365, 64, 35, 24);
    		frmRfoJoeDocent.getContentPane().add(btnRoofPwrOffJoeDocent);
    		
    		JButton btnMountPwrOnJoeDocent = new JButton("ON");
    		btnMountPwrOnJoeDocent.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnMountPwrOnJoeDocent.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				textAreaStatusJoeDocent.setText("");
    				TwoWaySerialComm.userInput = "::MPon\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Mount Power On " + userInput);
    			}
    		});
    		btnMountPwrOnJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		btnMountPwrOnJoeDocent.setBackground(Color.GREEN);
    		btnMountPwrOnJoeDocent.setBounds(320, 99, 35, 24);
    		frmRfoJoeDocent.getContentPane().add(btnMountPwrOnJoeDocent);
    		
    		JButton btnMountPwrOffJoeDocent = new JButton("OFF");
    		btnMountPwrOffJoeDocent.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
    		btnMountPwrOffJoeDocent.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				textAreaStatusJoeDocent.setText("");
    				TwoWaySerialComm.userInput = "::MPoff\n";
    				try{
    					
    				SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
    				
    				WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
    				
    				}  catch (IOException ex) {}
    				
    				System.out.println("\n" + "I clicked Mount Power Off " + userInput);
    			}
    		});
    		btnMountPwrOffJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		btnMountPwrOffJoeDocent.setBackground(Color.RED);
    		btnMountPwrOffJoeDocent.setForeground(Color.WHITE);
    		btnMountPwrOffJoeDocent.setBounds(365, 99, 35, 24);
    		frmRfoJoeDocent.getContentPane().add(btnMountPwrOffJoeDocent);
    		
    		//---------------------------------Joe Docent Labels
    		
    		JLabel lblRoofPosition = new JLabel("ROOF POSITION");
    		lblRoofPosition.setFont(new Font("Tahoma", Font.BOLD, 12));
    		lblRoofPosition.setHorizontalAlignment(SwingConstants.CENTER);
    		lblRoofPosition.setHorizontalTextPosition(SwingConstants.CENTER);
    		lblRoofPosition.setBounds(52, 27, 127, 22);
    		frmRfoJoeDocent.getContentPane().add(lblRoofPosition);
    		
    		JLabel lblMountPosition = new JLabel("MOUNT POSITION");
    		lblMountPosition.setFont(new Font("Tahoma", Font.BOLD, 12));
    		lblMountPosition.setHorizontalTextPosition(SwingConstants.CENTER);
    		lblMountPosition.setHorizontalAlignment(SwingConstants.CENTER);
    		lblMountPosition.setBounds(52, 99, 127, 22);
    		frmRfoJoeDocent.getContentPane().add(lblMountPosition);
    		
    		JLabel lblPowerStatus = new JLabel("POWER STATUS");
    		lblPowerStatus.setFont(new Font("Tahoma", Font.BOLD, 12));
    		lblPowerStatus.setHorizontalTextPosition(SwingConstants.CENTER);
    		lblPowerStatus.setHorizontalAlignment(SwingConstants.CENTER);
    		lblPowerStatus.setBounds(52, 172, 127, 22);
    		frmRfoJoeDocent.getContentPane().add(lblPowerStatus);
    		
    		JLabel lblBuildingPower = new JLabel("BUILDING PWR");
    		lblBuildingPower.setFont(new Font("Tahoma", Font.BOLD, 11));
    		lblBuildingPower.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblBuildingPower.setBounds(30, 198, 86, 22);
    		frmRfoJoeDocent.getContentPane().add(lblBuildingPower);
    		
    		JLabel lblRoofPower = new JLabel("ROOF PWR");
    		lblRoofPower.setFont(new Font("Tahoma", Font.BOLD, 11));
    		lblRoofPower.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblRoofPower.setBounds(41, 241, 75, 22);
    		frmRfoJoeDocent.getContentPane().add(lblRoofPower);   
    		
    		JLabel lblMountPower = new JLabel("MOUNT PWR");
    		lblMountPower.setFont(new Font("Tahoma", Font.BOLD, 11));
    		lblMountPower.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblMountPower.setBounds(41, 287, 75, 22);
    		frmRfoJoeDocent.getContentPane().add(lblMountPower);
    		
    		JLabel lblRoofPowerSwitch = new JLabel("Roof Power");
    		lblRoofPowerSwitch.setFont(new Font("Tahoma", Font.BOLD, 12));
    		lblRoofPowerSwitch.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblRoofPowerSwitch.setBounds(202, 64, 105, 24);
    		frmRfoJoeDocent.getContentPane().add(lblRoofPowerSwitch);
    		
    		JLabel lblMountPowerSwitch = new JLabel("Mount Power");
    		lblMountPowerSwitch.setFont(new Font("Tahoma", Font.BOLD, 12));
    		lblMountPowerSwitch.setHorizontalAlignment(SwingConstants.RIGHT);
    		lblMountPowerSwitch.setBounds(202, 97, 105, 24);
    		frmRfoJoeDocent.getContentPane().add(lblMountPowerSwitch);
    		    		
    		//---------------------------------Joe Docent TextField and TextArea
    		
    		textAreaStatusJoeDocent = new JTextArea();
    		textAreaStatusJoeDocent.setWrapStyleWord(true);
    		textAreaStatusJoeDocent.setLineWrap(true);
    		textAreaStatusJoeDocent.setFont(new Font("Arial", Font.BOLD, 11));
    		textAreaStatusJoeDocent.setBounds(229, 20, 160, 33);
    		frmRfoJoeDocent.getContentPane().add(textAreaStatusJoeDocent);
    		
    		textRoofPositionJoeDocent = new JTextField();
    		textRoofPositionJoeDocent.setHorizontalAlignment(SwingConstants.CENTER);
    		textRoofPositionJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		textRoofPositionJoeDocent.setBounds(62, 47, 106, 33);
    		frmRfoJoeDocent.getContentPane().add(textRoofPositionJoeDocent);
    		textRoofPositionJoeDocent.setColumns(10);
    		
    		textMountParkedJoeDocent = new JTextField();
    		textMountParkedJoeDocent.setHorizontalAlignment(SwingConstants.CENTER);
    		textMountParkedJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		textMountParkedJoeDocent.setColumns(10);
    		textMountParkedJoeDocent.setBounds(62, 120, 106, 33);
    		frmRfoJoeDocent.getContentPane().add(textMountParkedJoeDocent);
    		
    		textBldgPowerJoeDocent = new JTextField();
    		textBldgPowerJoeDocent.setHorizontalAlignment(SwingConstants.CENTER);
    		textBldgPowerJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		textBldgPowerJoeDocent.setBounds(126, 193, 45, 33);
    		frmRfoJoeDocent.getContentPane().add(textBldgPowerJoeDocent);
    		textBldgPowerJoeDocent.setColumns(10);    		
    		
    		textRoofPowerJoeDocent = new JTextField();
    		textRoofPowerJoeDocent.setHorizontalAlignment(SwingConstants.CENTER);
    		textRoofPowerJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		textRoofPowerJoeDocent.setColumns(10);
    		textRoofPowerJoeDocent.setBounds(126, 237, 45, 33);
    		frmRfoJoeDocent.getContentPane().add(textRoofPowerJoeDocent);   		
    		
    		textMountPowerJoeDocent = new JTextField();
    		textMountPowerJoeDocent.setHorizontalAlignment(SwingConstants.CENTER);
    		textMountPowerJoeDocent.setFont(new Font("Tahoma", Font.BOLD, 14));
    		textMountPowerJoeDocent.setColumns(10);
    		textMountPowerJoeDocent.setBounds(126, 282, 45, 33);
    		frmRfoJoeDocent.getContentPane().add(textMountPowerJoeDocent);
    	}
    }

    
    

        
    public static void main ( String[] args )
    {
    	ReadAFile.startReadAFile();
    	
        try
        {
            (new TwoWaySerialComm()).connect(ReadAFile.comPort);	//make sure COM port number is correct!; Dave's mockup is COM5
        }
        catch ( Exception e )
        {
                       e.printStackTrace();
        }
       
        roofControlPanel.roofControlPanel(); 
        roofControlPanelJoeDocent.RoofControlPanelJoeDocent();
        
        
        //automatically send a status query at start of program
        
        TwoWaySerialComm.userInput = "::Status\n";
		try{
			
		SerialWriter.out.write(TwoWaySerialComm.userInput.getBytes());
		
		WriteAFileInRoofControlCommandToArduino.writeAFileCommand();	//calls log writer
		
		}  catch (IOException ex) {}
		
		System.out.println("\n" + "Automatic send Status query at begin of program " + userInput);
                
    }  //close main method
 
}  //close outer class TwoWaySerialComm


-----------WriteAFileInRoofControlCommandToArduino.java

package twoWaySerialComm;

import java.io.*; 
import java.text.SimpleDateFormat;
import java.util.Date;
import twoWaySerialComm.TwoWaySerialComm;
import twoWaySerialComm.ReadAFile;

public class WriteAFileInRoofControlCommandToArduino {
	
	//static File log;
	//static File dir;
	
	public static void writeAFileCommand() {
		
		//these strings are placeholders for when the actual input String line and command output String userInput are accessed
		
		//String line = "INFO: this is where strings from the Arduino ";
		//String userInput = "and command lines from Java ::Open, ::Close, etc., would be logged";
		
		//File log = new File("C:/Users/James Finn/Desktop/MyText.txt");
		
		try {
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat sdfDirectory = new SimpleDateFormat("yyyy-MM-dd HHmmss");
			SimpleDateFormat sdfDateOnly = new SimpleDateFormat("yyyy-MM-dd");	
			
			if (TwoWaySerialComm.a == 0) {
				TwoWaySerialComm.dir = new File(ReadAFile.logDirectory + sdfDirectory.format(new Date()));
				TwoWaySerialComm.dir.mkdirs();
				TwoWaySerialComm.a += 1;
			}
			
			//log = new File("C:/Users/James Finn/Desktop/TRaxJavaLog/" + sdfDateOnly.format(new Date()) + ".txt");
			TwoWaySerialComm.log = new File(TwoWaySerialComm.dir.getAbsolutePath() + "/" + sdfDateOnly.format(new Date()) + ".txt");
			
			FileWriter writer = new FileWriter(TwoWaySerialComm.log, true);  //in the FileWriter(log,true); the "true" prevents overwriting existing data in file
			
			writer.write("\n" + sdf.format(new Date()) + "  " + TwoWaySerialComm.userInput);

			writer.close();
			
		}  catch (IOException ex) {
			ex.printStackTrace();
		}
			
	}
	
}

-----------WriteAFileInRoofControlStringFromArduino.java-----------

package twoWaySerialComm;

import java.io.*; 
import java.text.SimpleDateFormat;
import java.util.Date;
import twoWaySerialComm.TwoWaySerialComm;
import twoWaySerialComm.ReadAFile;

public class WriteAFileInRoofControlStringFromArduino {
	
	//static File log;
	//static File dir;
	
	public static void writeAFileString() {
		
		//these strings are placeholders for when the actual input String line and command output String userInput are accessed
		
		//String line = "INFO: this is where strings from the Arduino ";
		//String userInput = "and command lines from Java ::Open, ::Close, etc., would be logged";
		
		//File log = new File("C:/Users/James Finn/Desktop/MyText.txt");
		
		try {
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat sdfDirectory = new SimpleDateFormat("yyyy-MM-dd HHmmss");
			SimpleDateFormat sdfDateOnly = new SimpleDateFormat("yyyy-MM-dd");	
			
			if (TwoWaySerialComm.a == 0) {
				TwoWaySerialComm.dir = new File(ReadAFile.logDirectory + sdfDirectory.format(new Date()));
				TwoWaySerialComm.dir.mkdirs();
				TwoWaySerialComm.a += 1;
			}
			
			//log = new File("C:/Users/James Finn/Desktop/TRaxJavaLog/" + sdfDateOnly.format(new Date()) + ".txt");
			TwoWaySerialComm.log = new File(TwoWaySerialComm.dir.getAbsolutePath() + "/" + sdfDateOnly.format(new Date()) + ".txt");
			
			FileWriter writer = new FileWriter(TwoWaySerialComm.log, true);  //in the FileWriter(log,true); the "true" prevents overwriting existing data in file
			
			if (TwoWaySerialComm.line.length() > 1) {
				
				writer.write("\n" + sdf.format(new Date()) + "  " + TwoWaySerialComm.line + "\n");
				
			}
			
			writer.close();
			
		}  catch (IOException ex) {
			ex.printStackTrace();
		}
			
	}
	
}
